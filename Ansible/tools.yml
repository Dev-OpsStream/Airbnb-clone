---
  - name: Setup Docker, Jenkins, Docker Slim, SonarQube, SonarQube Scanner, Helm, Kubectl, Trivy
    hosts: all
    become: true
    tasks:
  
      - name: Gather facts
        setup:
  
      - name: Install Docker
        yum:
          name: docker
          state: present
  
      - name: Start and enable Docker service
        systemd:
          name: docker
          state: started
          enabled: true
  
      - name: Update all packages
        yum:
          name: '*'
          state: latest
  
      # Task to install required dependencies
      - name: Install required dependencies
        yum:
          name:
            - java-17-amazon-corretto
            - wget
          state: present
  
      # Add Jenkins GPG key
      - name: Import Jenkins GPG key
        rpm_key:
          key: https://pkg.jenkins.io/redhat/jenkins.io.key
          state: present
  
      # Add Jenkins repository
      - name: Add Jenkins repository
        yum_repository:
          name: jenkins
          description: Jenkins
          baseurl: https://pkg.jenkins.io/redhat-stable/
          gpgcheck: no  # skip gpgcheck since the key is already imported
          enabled: yes
  
      # Install Jenkins
      - name: Install Jenkins
        yum:
          name: jenkins
          state: present
  
      - name: Install unzip
        yum:
          name: unzip
          state: present
  
      - name: Download Docker Slim
        get_url:
          url: https://github.com/slimtoolkit/slim/releases/download/1.40.11/dist_linux.tar.gz
          dest: "/tmp/docker-slim.tar.gz"
        register: download_result
  
      - name: Extract Docker Slim
        unarchive:
          src: "/tmp/docker-slim.tar.gz"
          dest: "/tmp/"
          remote_src: yes
        when: download_result is succeeded
  
      - name: Debug output of extracted files
        command: ls -l /tmp/dist_linux/
        register: ls_output
  
      - name: Show extracted directory contents
        debug:
          var: ls_output.stdout_lines
  
      # Move Docker Slim binary to /usr/local/bin/
      - name: Move Docker Slim binary to /usr/local/bin/
        command: mv /tmp/dist_linux/slim /usr/local/bin/
        when: "'slim' in ls_output.stdout"
  
      # Move Docker Slim Sensor binary to /usr/local/bin/
      - name: Move Docker Slim Sensor binary to /usr/local/bin/
        command: mv /tmp/dist_linux/slim-sensor /usr/local/bin/
        when: "'slim-sensor' in ls_output.stdout"
        ignore_errors: yes  # Skip if slim-sensor binary does not exist
  
      # Move Docker Slim main binary to /usr/local/bin/
      - name: Move Docker Slim main binary to /usr/local/bin/
        command: mv /tmp/dist_linux/docker-slim /usr/local/bin/
        when: "'docker-slim' in ls_output.stdout"
  
      - name: Check if Docker Slim binary exists
        stat:
          path: /usr/local/bin/docker-slim
        register: slim_binary
  
      - name: Check if Docker Slim Sensor binary exists
        stat:
          path: /usr/local/bin/docker-slim-sensor
        register: slim_sensor_binary
  
      - name: Fail if Docker Slim binary does not exist
        fail:
          msg: "Docker Slim binary is not installed correctly."
        when: not slim_binary.stat.exists
  
      - name: Fail if Docker Slim Sensor binary does not exist
        fail:
          msg: "Docker Slim Sensor binary is not installed correctly."
        when: not slim_sensor_binary.stat.exists
  
      - name: Make Docker Slim executable
        command: chmod +x /usr/local/bin/docker-slim
  
      - name: Make Docker Slim Sensor executable
        command: chmod +x /usr/local/bin/docker-slim-sensor
        when: slim_sensor_binary.stat.exists  # Only make it executable if it exists
  
      - name: Print installed versions
        command: /usr/local/bin/docker-slim --version
        register: slim_version
  
      - name: Show Docker Slim version
        debug:
          var: slim_version.stdout
  
      - name: Download SonarQube
        get_url:
          url: "https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.9.1.69595.zip"
          dest: /tmp/sonarqube.zip
  
      - name: Extract SonarQube
        unarchive:
          src: /tmp/sonarqube.zip
          dest: /opt/
          remote_src: yes
  
      - name: Create SonarQube user
        user:
          name: sonarqube
          system: yes
  
      - name: Change ownership of SonarQube directory
        file:
          path: /opt/sonarqube-9.9.1.69595
          owner: sonarqube
          group: sonarqube
          state: directory
          recurse: yes
  
      - name: Set up SonarQube service
        copy:
          dest: /etc/systemd/system/sonarqube.service
          content: |
            [Unit]
            Description=SonarQube service
            After=syslog.target network.target
  
            [Service]
            Type=forking
            ExecStart=/opt/sonarqube-9.9.1.69595/bin/linux-x86-64/sonar.sh start
            ExecStop=/opt/sonarqube-9.9.1.69595/bin/linux-x86-64/sonar.sh stop
            User=sonarqube
            Group=sonarqube
            Restart=always
  
            [Install]
            WantedBy=multi-user.target
  
      - name: Reload systemd and start SonarQube service
        systemd:
          daemon_reload: yes
          name: sonarqube
          enabled: yes
          state: started
  
      # Tasks to install SonarQube Scanner
      - name: Download SonarQube Scanner
        get_url:
          url: "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip"
          dest: /tmp/sonar-scanner.zip
  
      - name: Extract SonarQube Scanner
        unarchive:
          src: /tmp/sonar-scanner.zip
          dest: /opt/
          remote_src: yes
  
      - name: Rename extracted directory for easier access
        command: mv /opt/sonar-scanner-4.8.0.2856-linux /opt/sonar-scanner
        args:
          creates: "/opt/sonar-scanner"
  
      - name: Set up SonarQube Scanner in PATH
        lineinfile:
          path: /etc/profile.d/sonar_scanner.sh
          line: 'export PATH=$PATH:/opt/sonar-scanner/bin'
          create: yes
          state: present
          mode: '0755'
  
      - name: Reload environment variables
        shell: source /etc/profile.d/sonar_scanner.sh
        args:
          executable: /bin/bash
  
      - name: Verify SonarQube Scanner installation
        command: /opt/sonar-scanner/bin/sonar-scanner -v
        register: sonar_scanner_version
  
      - name: Show SonarQube Scanner version
        debug:
          var: sonar_scanner_version.stdout
  
      - name: Retrieve latest stable version of kubectl
        command: "curl -L -s https://dl.k8s.io/release/stable.txt"
        register: kubectl_version
        changed_when: false
  
      - name: Install kubectl
        get_url:
          url: "https://dl.k8s.io/release/{{ kubectl_version.stdout }}/bin/linux/amd64/kubectl"
          dest: /usr/local/bin/kubectl
          mode: '0755'
          force: yes  # ensures it downloads again if it already exists
  
      - name: Ensure kubectl is executable
        command: chmod +x /usr/local/bin/kubectl
  
      - name: Check kubectl version
        command: /usr/local/bin/kubectl version --client
        register: kubectl_version_check
        changed_when: false
  
      - name: Fail if kubectl is not installed correctly
        fail:
          msg: "kubectl installation failed or version check failed."
        when: kubectl_version_check.rc != 0
  
      - name: Install Helm
        shell: "curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash"
        args:
          creates: /usr/local/bin/helm
  
      - name: Connect to EKS Cluster
        command: aws eks --region ap-south-1 update-kubeconfig --name EksCluster
        environment:
          AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
          AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
          AWS_DEFAULT_REGION: ap-south-1
          KUBECONFIG: /home/ec2-user/.kube/config
  
      # Install Trivy
      - name: Download Trivy
        get_url:
          url: https://github.com/aquasecurity/trivy/releases/download/v0.22.0/trivy_0.22.0_Linux-64bit.tar.gz
          dest: "/tmp/trivy.tar.gz"
  
      - name: Extract Trivy
        unarchive:
          src: "/tmp/trivy.tar.gz"
          dest: "/usr/local/bin/"
          remote_src: yes
  
      - name: Verify Trivy installation
        command: trivy --version
        register: trivy_version
        changed_when: false
  
      - name: Show Trivy version
        debug:
          var: trivy_version.stdout   
